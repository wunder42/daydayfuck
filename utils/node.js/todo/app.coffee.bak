express = require 'express'
path = require 'path'
log4js = require 'log4js'
routes = require './routes/routes'

log4js.configure {
	appenders: [
		{type: 'console'},
		{
			type: 'file',
			filename: 'access.log',
			maxLogSize: 1024 * 1024,
			category: 'normal'
		}
	]
}

logger = log4js.getLogger 'normal'
logger.setLevel 'INFO'

app = express()
app.use express.bodyParser()
server = (require 'http').createServer app
# io = (require 'socket.io').listen server

app.use log4js.connectLogger logger, {level:log4js.levels.INFO}

#
MongoStore = require('connect-mongo')(express)
settings = require './settings'
flash = require 'connect-flash'

app.use express.methodOverride()

app.use express.cookieParser()
app.use express.session {
  secret: settings.cookieSecret,
  key: settings.db,
  cookie: {maxAge: 1000 * 60 * 60 * 24 * 30},
  store: new MongoStore({
    db: settings.db
  })
}

crypto = require 'crypto'
User = require './models/user'

mongodb = require './models/db'

app.set 'views', path.join(__dirname, 'views')
# app.engine '.html', ejs.__express
app.engine 'html', require('ejs').renderFile
# app.set 'view engine', 'ejs'

app.use flash()

app.use express.static(path.join(__dirname, 'public'))
app.use require('connect-assets')()

# routes(app)

checkAuth = (user) ->
	mongodb.open (err, db) ->
		res.send {type:-1, info:'mongodb error'} if err
		db.collection 'user', (err, collection) ->
			res.send {type:-1, info:'mongodb error'} if err
			collection.findOne {name:user.name, password:user.password}, (err, xuser) ->
				mongodb.close()
				if not err
					res.send {type:1, url:'/#/login'} 
					

app.get '/', (req, res) ->
	res.render 'home.html'
	# req.session.name = 'session'
	# res.send {status: true}

app.get '/t', (req, res) ->
	res.send {status: req.session.name}

app.get '/m/add', (req, res) ->
	logger.info req.query.content
	res.send {success: 'success'}

app.post '/u/register', (req, res) ->
	name = req.body.username
	password = req.body.password

	user = new User name, password, 'xx@gmail.com'

	mongodb.open (err, db) ->
		res.send {type:-1, info:'mongodb error'} if err
		db.collection 'user', (err, collection) ->
			res.send {type:-1, info:'mongodb error'} if err
			collection.findOne {name:user.name}, (err, user) ->
				if user
					mongodb.close()
					res.send {type:1, url:'/#/login'} 
			collection.insert user, {safe: true}, (err, user) ->
				mongodb.close()
		res.send {type:1, url:'/#/login'}

app.get '/u/login', (req, res) ->
	logger.info 'fuck', req.session.user
	res.send {type:1, url:'/#/login'} if req.session.user == null
	# mongodb.open (err, db) ->
	# 	res.send {type:-1, info:'mongodb error'} if err
	# 	db.collection 'user', (err, collection) ->
	# 		res.send {type:-1, info:'mongodb error'} if err
	# 		collection.findOne {name:user.name}, (err, user) ->
	# 			if user
	# 				mongodb.close()
	# 				res.send {type:1, url:'/#/login'} 
	# 		collection.insert user, {safe: true}, (err, user) ->
	# 			mongodb.close()
	res.send {type:1, url:'/#/tasks'}

app.post '/u/login', (req, res) ->
	name = req.body.username
	password = req.body.password

	user = new User name, password, 'xx@gmail.com'
	req.session.user = user
	mongodb.open (err, db) ->
		res.send {type:-1, info:'mongodb error'} if err
		db.collection 'user', (err, collection) ->
			res.send {type:-1, info:'mongodb error'} if err
			collection.findOne {name:user.name, password:user.password}, (err, xuser) ->
				mongodb.close()
				if xuser
					logger.info 'huihua',req.session.user
					res.send {type:1, url:'/#/tasks'} 
		res.send {type:1, url:'/#/login'}

app.get '/u/logout', (req, res) ->
	req.session.user = null
	res.redirect '/'

# app.get '/d/data', (req, res) ->
	
# 	res.send {type:2, data:'lalala'}

# @todos = {}
# io.sockets.on 'connection', (socket) =>
# 	console.log 'connected...'
# 	socket.on 'joinList', (list) => 
# 		console.log "join list #{list}"
# 		socket.list = list
# 		socket.join list
# 		@todos[list] ?= []
# 		socket.emit 'syncItems', @todos[list]

# 		socket.on 'newItem', (todo) =>
# 			console.log "new todo #{todo.title}"
# 			@todos[list].push todo
# 			io.sockets.in(socket.list).emit('itemAdded', todo)

# 		socket.on 'removeItem', (id) =>
# 			@todos[list] = @todos[list].filter (item) -> item.id isnt id
# 			io.sockets.in(socket.list).emit('itemRemoved', id)

# handleNewItem = (socket) ->
server.listen 7878


