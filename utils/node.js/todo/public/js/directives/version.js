// Generated by CoffeeScript 1.6.3
(function() {
  define([], function() {
    var $, activeItem, activeManager, beforeOrAfter, curItem, drag, dragManager, initManager, isIn, isMouseDown, itemCopy, mouseCoords, mouseDown, mouseMove, mouseOffset, mouseOffsetElement, mousePosition, mouseUp, nextElement, previousElment, startDrag, stt, updatePosition;
    $ = jQuery;
    dragManager = [];
    curItem = null;
    itemCopy = null;
    isMouseDown = false;
    mouseOffset = null;
    mousePosition = null;
    activeManager = null;
    activeItem = null;
    initManager = function(obj) {
      var x, _i, _len, _ref;
      _ref = obj.children();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        dragManager.push($(x));
      }
      return console.log(dragManager);
    };
    startDrag = function(obj) {
      console.log('startDrag', obj, obj.attr('startleft'), obj.attr('starttop'));
      itemCopy.append(obj.clone(true));
      obj.css('opacity', 0);
      return itemCopy.css({
        opacity: 0.5,
        left: obj.attr('startleft') + 'px',
        top: obj.attr('starttop') + 'px',
        display: 'block'
      });
    };
    drag = function(obj, pos) {
      itemCopy.css('left', pos.x - mouseOffset.offsetLeft);
      return itemCopy.css('top', pos.y - mouseOffset.offsetTop);
    };
    mouseOffsetElement = function(obj, e) {
      return {
        offsetLeft: e.pageX - obj.offset().left,
        offsetTop: e.pageY - obj.offset().top
      };
    };
    mouseCoords = function(e) {
      return {
        x: e.pageX,
        y: e.pageY
      };
    };
    isIn = function(m, n) {
      var center;
      center = {
        x: m.offset().left + m.width() / 2,
        y: m.offset().top + m.height() / 2
      };
      if (center.x > n.offset().left && center.y > n.offset().top && center.x < n.offset().left + n.width() && center.y < n.offset().top + n.height()) {
        return true;
      }
      return false;
    };
    beforeOrAfter = function(m, n) {
      var center;
      center = {
        y: m.offset().top + m.height() / 2
      };
      if (center.y < (n.offset().top + n.height() / 2)) {
        return 'before';
      }
      return 'after';
    };
    nextElement = function(n) {
      var item, _i, _len, _ref;
      _ref = n.nextAll();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.nodeType === 1) {
          return item;
        }
      }
      return null;
    };
    previousElment = function(n) {
      var item, _i, _len, _ref;
      _ref = n.prevAll();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.nodeType === 1) {
          return item;
        }
      }
      return null;
    };
    mouseDown = function(e) {
      var t;
      t = $(e.target);
      console.log(t.attr('class'));
      if (t.hasClass('dragItem')) {
        curItem = t;
        mouseOffset = mouseOffsetElement(curItem, e);
        startDrag(curItem);
      }
      isMouseDown = true;
      if (t.hasClass('itemCopy')) {
        return false;
      }
    };
    mouseUp = function(e) {
      console.log('mouseup', curItem.attr('class'), curItem.attr('startleft'), curItem.attr('starttop'));
      curItem.css('opacity', 1);
      itemCopy.html('');
      itemCopy.css('display', 'none');
      curItem = null;
      return isMouseDown = false;
    };
    updatePosition = function() {
      var i, item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = dragManager.length; _i < _len; _i++) {
        item = dragManager[_i];
        item.attr({
          startleft: item.offset().left,
          starttop: item.offset().top,
          startwidth: item.width(),
          startheight: item.height()
        });
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = item.children();
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            i = _ref[_j];
            i = $(i);
            _results1.push(i.attr({
              startleft: i.offset().left,
              starttop: i.offset().top,
              startwidth: i.width(),
              startheight: i.height()
            }));
          }
          return _results1;
        })());
      }
      return _results;
    };
    mouseMove = function(e) {
      var item, _i, _j, _len, _len1, _ref;
      activeManager = null;
      activeItem = null;
      updatePosition();
      if (isMouseDown && curItem) {
        mousePosition = mouseCoords(e);
        drag(curItem, mousePosition);
        for (_i = 0, _len = dragManager.length; _i < _len; _i++) {
          item = dragManager[_i];
          if (isIn(itemCopy, item)) {
            activeManager = item;
            break;
          }
        }
        if (activeManager) {
          _ref = activeManager.children();
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            item = _ref[_j];
            item = $(item);
            if (curItem.html() !== item.html() && isIn(itemCopy, item)) {
              console.log(curItem.html(), item.html());
              activeItem = item;
              break;
            }
          }
        }
        if (activeItem) {
          console.log('abc', curItem.html(), activeItem.html(), beforeOrAfter(itemCopy, activeItem));
          if (beforeOrAfter(itemCopy, activeItem) === 'before' && activeItem !== nextElement(curItem)) {
            if (activeItem.hasClass('addCart')) {
              curItem.insertBefore(previousElment(activeItem));
              return;
            }
            return curItem.insertBefore(activeItem);
          } else if (beforeOrAfter(itemCopy, activeItem) === 'after' && activeItem.html() !== $(previousElment(curItem)).html()) {
            console.log('aa', activeItem, $(previousElment(curItem)), curItem);
            return curItem.insertBefore(nextElement(activeItem));
          }
        } else {
          return console.log('false');
        }
      }
    };
    stt = function() {
      console.log('start');
      initManager($("#dragContainer"));
      itemCopy = $("<div></div>");
      itemCopy.css({
        position: 'absolute',
        display: 'none',
        zindex: 100
      });
      $("body").append(itemCopy);
      console.log(itemCopy);
      return $(document).mousedown(mouseDown).mousemove(mouseMove).mouseup(mouseUp);
    };
    return [
      'appVersion', function() {
        return function(scope, elm, attrs) {
          console.log('apple');
          return stt();
        };
      }
    ];
  });

}).call(this);
