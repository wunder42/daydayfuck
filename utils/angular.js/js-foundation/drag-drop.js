// Generated by CoffeeScript 1.6.1
(function() {
  var $, activeItem, activeManager, curItem, drag, dragManager, initManager, isMouseDown, itemCopy, mouseCoords, mouseDown, mouseMove, mouseOffset, mouseOffsetElement, mousePosition, startDrag, updatePosition;

  $ = jQuery;

  dragManager = [];

  curItem = null;

  itemCopy = null;

  isMouseDown = false;

  mouseOffset = null;

  mousePosition = null;

  activeManager = null;

  activeItem = null;

  initManager = function(obj) {
    var x, _i, _len, _ref;
    _ref = obj.children();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      dragManager.push($(x));
    }
    return console.log(dragManager);
  };

  startDrag = function(obj) {
    console.log('i');
    itemCopy.append(obj.clone(true));
    obj.css('opacity', 0);
    itemCopy.css({
      opacity: 0.5,
      left: obj.attr('startLeft'),
      top: obj.attr('startTop'),
      display: 'block'
    });
    return console.log('startDrag', itemCopy);
  };

  drag = function(obj, pos) {
    itemCopy.css('left', pos.x - mouseOffset.offsetLeft);
    return itemCopy.css('top', pos.x - mouseOffset.offsetTop);
  };

  mouseOffsetElement = function(obj, e) {
    return {
      offsetLeft: e.pageX - obj.offsetLeft,
      offsetTop: e.pageY - obj.offsetTop
    };
  };

  mouseCoords = function(e) {
    return {
      x: e.pageX,
      y: e.pageY
    };
  };

  mouseDown = function(e) {
    var t;
    t = $(e.target);
    console.log(t.attr('class'));
    if (t.attr('class') === 'dragItem') {
      curItem = t;
      mouseOffset = mouseOffsetElement(curItem, e);
      startDrag(curItem);
    }
    isMouseDown = true;
    if (t.attr('class') === 'itemCopy') {
      return false;
    }
  };

  updatePosition = function() {
    var i, item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = dragManager.length; _i < _len; _i++) {
      item = dragManager[_i];
      item.attr({
        startLeft: item.css('offsetLeft'),
        startTop: item.css('offsetTop'),
        startWidth: item.css('offsetWidth'),
        startHeight: item.css('offsetHeight')
      });
      _results.push((function() {
        var _j, _len1, _ref, _results1;
        _ref = item.children();
        _results1 = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          i = _ref[_j];
          i = $(i);
          _results1.push(i.attr({
            startLeft: i.css('offsetLeft'),
            startTop: i.css('offsetTop'),
            startWidth: i.css('offsetWidth'),
            startHeight: i.css('offsetHeight')
          }));
        }
        return _results1;
      })());
    }
    return _results;
  };

  mouseMove = function(e) {
    activeManager = null;
    activeItem = null;
    updatePosition();
    if (isMouseDown && curItem) {
      mousePosition = mouseCoords(e);
      return drag(curItem, mousePosition);
    }
  };

  $(function() {
    console.log('start');
    initManager($("#dragContainer"));
    itemCopy = $("<div></div>");
    $("body").append(itemCopy);
    console.log(itemCopy);
    return $(document).mousedown(mouseDown).mousemove(mouseMove);
  });

}).call(this);
